name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # –†–∞–∑—Ä–µ—à–∏—Ç—å —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ workflow

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Run tests
        run: |
          echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
          python -m pytest --cov=accounts --cov=invitations --cov=companies --cov=teams --cov=reviews --cov=perfecto
          echo "‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!"

  deploy:
    name: Deploy to Production
    needs: test  # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Setup Docker context for remote access
        run: |
          # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SSH –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ host key
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          
          echo "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞..."
          docker context create remote --docker "host=ssh://${SSH_USER}@${IP}" --description "Remote Docker context for production"
          docker context use remote
          echo "‚úÖ Docker –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          IP: ${{ secrets.IP }}
      
      - name: Decode and create environment file
        run: |
          echo "üîê –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
          echo "${{ secrets.ENV_FILE_BASE64 }}" | base64 -d > .env.prod
          echo "‚úÖ –§–∞–π–ª .env.prod —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
      
      - name: Build and deploy with Docker Compose
        run: |
          echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
          docker compose -f docker-compose.prod.yml build
          
          echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          docker compose -f docker-compose.prod.yml up -d
          
          echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://${DOMAIN}"
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
      
      - name: Cleanup
        run: |
          echo "üßπ –û—á–∏—Å—Ç–∫–∞..."
          docker context use default
          docker context rm remote -f
          echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
