version: '3.8'

services:
  # PostgreSQL база данных с персистентным хранилищем
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?Database password is required}
      - POSTGRES_USER=${POSTGRES_USER:?Database user is required}
      - POSTGRES_DB=${POSTGRES_DB:?Database name is required}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:?Database user is required} -d ${POSTGRES_DB:?Database name is required}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network
  
  # Adminer для управления базой данных (доступен только через внутреннюю сеть)
  adminer:
    image: adminer:latest
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - ADMINER_DEFAULT_SERVER=db
    networks:
      - app_network
    # Не публикуем порты наружу для безопасности
  
  # Django приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env.prod
    expose:
      - 8000
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health-check/"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Nginx для проксирования запросов и статических файлов
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "2222:80"  # Публикуем на порт 2222 для последующего проксирования через Caddy
    volumes:
      # Изменяем путь монтирования файла конфигурации
      # Вместо монтирования в существующий файл, монтируем в директорию
      - ${NGINX_CONFIG_PATH:-./nginx/conf.d/default.conf}:/etc/nginx/conf.d/app.conf:ro
      - static_volume:/var/www/html/static
      - media_volume:/var/www/html/media
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app_network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  app_network:
    driver: bridge
